/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ITokenDelegatorInterface extends utils.Interface {
  functions: {
    "setImplementation(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "setImplementation" | "setOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "setImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "setImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ChangedName(string,string)": EventFragment;
    "ChangedSymbol(string,string)": EventFragment;
    "DelegateChanged(address,address,address)": EventFragment;
    "DelegateVotesChanged(address,uint256,uint256)": EventFragment;
    "MinterChanged(address,address)": EventFragment;
    "NewImplementation(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedName"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedSymbol"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateVotesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewImplementation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  _owner: string;
  _spender: string;
  _amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ChangedNameEventObject {
  _oldName: string;
  _newName: string;
}
export type ChangedNameEvent = TypedEvent<
  [string, string],
  ChangedNameEventObject
>;

export type ChangedNameEventFilter = TypedEventFilter<ChangedNameEvent>;

export interface ChangedSymbolEventObject {
  _oldSybmol: string;
  _newSybmol: string;
}
export type ChangedSymbolEvent = TypedEvent<
  [string, string],
  ChangedSymbolEventObject
>;

export type ChangedSymbolEventFilter = TypedEventFilter<ChangedSymbolEvent>;

export interface DelegateChangedEventObject {
  _delegator: string;
  _fromDelegate: string;
  _toDelegate: string;
}
export type DelegateChangedEvent = TypedEvent<
  [string, string, string],
  DelegateChangedEventObject
>;

export type DelegateChangedEventFilter = TypedEventFilter<DelegateChangedEvent>;

export interface DelegateVotesChangedEventObject {
  _delegate: string;
  _previousBalance: BigNumber;
  _newBalance: BigNumber;
}
export type DelegateVotesChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DelegateVotesChangedEventObject
>;

export type DelegateVotesChangedEventFilter =
  TypedEventFilter<DelegateVotesChangedEvent>;

export interface MinterChangedEventObject {
  _oldMinter: string;
  _newMinter: string;
}
export type MinterChangedEvent = TypedEvent<
  [string, string],
  MinterChangedEventObject
>;

export type MinterChangedEventFilter = TypedEventFilter<MinterChangedEvent>;

export interface NewImplementationEventObject {
  _oldImplementation: string;
  _newImplementation: string;
}
export type NewImplementationEvent = TypedEvent<
  [string, string],
  NewImplementationEventObject
>;

export type NewImplementationEventFilter =
  TypedEventFilter<NewImplementationEvent>;

export interface TransferEventObject {
  _from: string;
  _to: string;
  _amount: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ITokenDelegator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITokenDelegatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setImplementation(
      _implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  setImplementation(
    _implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    setImplementation(
      _implementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      _owner?: PromiseOrValue<string> | null,
      _spender?: PromiseOrValue<string> | null,
      _amount?: null
    ): ApprovalEventFilter;
    Approval(
      _owner?: PromiseOrValue<string> | null,
      _spender?: PromiseOrValue<string> | null,
      _amount?: null
    ): ApprovalEventFilter;

    "ChangedName(string,string)"(
      _oldName?: null,
      _newName?: null
    ): ChangedNameEventFilter;
    ChangedName(_oldName?: null, _newName?: null): ChangedNameEventFilter;

    "ChangedSymbol(string,string)"(
      _oldSybmol?: null,
      _newSybmol?: null
    ): ChangedSymbolEventFilter;
    ChangedSymbol(
      _oldSybmol?: null,
      _newSybmol?: null
    ): ChangedSymbolEventFilter;

    "DelegateChanged(address,address,address)"(
      _delegator?: PromiseOrValue<string> | null,
      _fromDelegate?: PromiseOrValue<string> | null,
      _toDelegate?: PromiseOrValue<string> | null
    ): DelegateChangedEventFilter;
    DelegateChanged(
      _delegator?: PromiseOrValue<string> | null,
      _fromDelegate?: PromiseOrValue<string> | null,
      _toDelegate?: PromiseOrValue<string> | null
    ): DelegateChangedEventFilter;

    "DelegateVotesChanged(address,uint256,uint256)"(
      _delegate?: PromiseOrValue<string> | null,
      _previousBalance?: null,
      _newBalance?: null
    ): DelegateVotesChangedEventFilter;
    DelegateVotesChanged(
      _delegate?: PromiseOrValue<string> | null,
      _previousBalance?: null,
      _newBalance?: null
    ): DelegateVotesChangedEventFilter;

    "MinterChanged(address,address)"(
      _oldMinter?: PromiseOrValue<string> | null,
      _newMinter?: PromiseOrValue<string> | null
    ): MinterChangedEventFilter;
    MinterChanged(
      _oldMinter?: PromiseOrValue<string> | null,
      _newMinter?: PromiseOrValue<string> | null
    ): MinterChangedEventFilter;

    "NewImplementation(address,address)"(
      _oldImplementation?: null,
      _newImplementation?: null
    ): NewImplementationEventFilter;
    NewImplementation(
      _oldImplementation?: null,
      _newImplementation?: null
    ): NewImplementationEventFilter;

    "Transfer(address,address,uint256)"(
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _amount?: null
    ): TransferEventFilter;
    Transfer(
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _amount?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    setImplementation(
      _implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setImplementation(
      _implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
