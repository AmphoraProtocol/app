/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { IAMPHClaimer, IAMPHClaimerInterface } from '../IAMPHClaimer';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: '_newCrvRate',
        type: 'uint256',
      },
    ],
    name: 'ChangedCrvRate',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: '_newCvxRate',
        type: 'uint256',
      },
    ],
    name: 'ChangedCvxRate',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: '_newVaultController',
        type: 'address',
      },
    ],
    name: 'ChangedVaultController',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: '_vaultClaimer',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: '_cvxAmount',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: '_crvAmount',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: '_amphAmount',
        type: 'uint256',
      },
    ],
    name: 'ClaimedAmph',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: '_token',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: '_receiver',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'RecoveredDust',
    type: 'event',
  },
  {
    inputs: [],
    name: 'AMPH',
    outputs: [
      {
        internalType: 'contract IERC20',
        name: '_AMPH',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'CRV',
    outputs: [
      {
        internalType: 'contract IERC20',
        name: '_CVX',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'CVX',
    outputs: [
      {
        internalType: 'contract IERC20',
        name: '_CVX',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'amphPerCrv',
    outputs: [
      {
        internalType: 'uint256',
        name: '_amphPerCrv',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'amphPerCvx',
    outputs: [
      {
        internalType: 'uint256',
        name: '_amphPerCvx',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_newRate',
        type: 'uint256',
      },
    ],
    name: 'changeCrvRate',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_newRate',
        type: 'uint256',
      },
    ],
    name: 'changeCvxRate',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_newVaultController',
        type: 'address',
      },
    ],
    name: 'changeVaultController',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint96',
        name: '_vaultId',
        type: 'uint96',
      },
      {
        internalType: 'uint256',
        name: '_cvxAmount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_crvAmount',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: '_receiver',
        type: 'address',
      },
    ],
    name: 'claimAmph',
    outputs: [
      {
        internalType: 'uint256',
        name: '_cvxAmountToSend',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_crvAmountToSend',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_claimedAmph',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_cvxAmount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_crvAmount',
        type: 'uint256',
      },
    ],
    name: 'claimable',
    outputs: [
      {
        internalType: 'uint256',
        name: '_cvxAmountToSend',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_crvAmountToSend',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_claimableAmph',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_token',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'recoverDust',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'vaultController',
    outputs: [
      {
        internalType: 'contract IVaultController',
        name: '_vaultController',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

export class IAMPHClaimer__factory {
  static readonly abi = _abi;
  static createInterface(): IAMPHClaimerInterface {
    return new utils.Interface(_abi) as IAMPHClaimerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IAMPHClaimer {
    return new Contract(address, _abi, signerOrProvider) as IAMPHClaimer;
  }
}
