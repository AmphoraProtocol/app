/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IVault {
  export type RewardStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type RewardStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };
}

export interface IVaultInterface extends utils.Interface {
  functions: {
    'CONTROLLER()': FunctionFragment;
    'baseLiability()': FunctionFragment;
    'claimRewards(address)': FunctionFragment;
    'claimableRewards(address)': FunctionFragment;
    'controllerTransfer(address,address,uint256)': FunctionFragment;
    'depositERC20(address,uint256)': FunctionFragment;
    'id()': FunctionFragment;
    'minter()': FunctionFragment;
    'modifyLiability(bool,uint256)': FunctionFragment;
    'recoverDust(address)': FunctionFragment;
    'tokenBalance(address)': FunctionFragment;
    'withdrawERC20(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'CONTROLLER'
      | 'baseLiability'
      | 'claimRewards'
      | 'claimableRewards'
      | 'controllerTransfer'
      | 'depositERC20'
      | 'id'
      | 'minter'
      | 'modifyLiability'
      | 'recoverDust'
      | 'tokenBalance'
      | 'withdrawERC20',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'CONTROLLER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'baseLiability', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimRewards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'claimableRewards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'controllerTransfer',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositERC20',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'id', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minter', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'modifyLiability',
    values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'recoverDust', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'tokenBalance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'withdrawERC20',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'CONTROLLER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseLiability', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimableRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'controllerTransfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'id', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'modifyLiability', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverDust', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawERC20', data: BytesLike): Result;

  events: {
    'ClaimedReward(address,uint256)': EventFragment;
    'Deposit(address,uint256)': EventFragment;
    'Recover(address,uint256)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ClaimedReward'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Recover'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ClaimedRewardEventObject {
  _token: string;
  _amount: BigNumber;
}
export type ClaimedRewardEvent = TypedEvent<[string, BigNumber], ClaimedRewardEventObject>;

export type ClaimedRewardEventFilter = TypedEventFilter<ClaimedRewardEvent>;

export interface DepositEventObject {
  _token: string;
  _amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface RecoverEventObject {
  _token: string;
  _amount: BigNumber;
}
export type RecoverEvent = TypedEvent<[string, BigNumber], RecoverEventObject>;

export type RecoverEventFilter = TypedEventFilter<RecoverEvent>;

export interface WithdrawEventObject {
  _token: string;
  _amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface IVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTROLLER(overrides?: CallOverrides): Promise<[string] & { _vaultController: string }>;

    baseLiability(overrides?: CallOverrides): Promise<[BigNumber] & { _liability: BigNumber }>;

    claimRewards(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimableRewards(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[IVault.RewardStructOutput[]] & { _rewards: IVault.RewardStructOutput[] }>;

    controllerTransfer(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositERC20(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    id(overrides?: CallOverrides): Promise<[BigNumber] & { _id: BigNumber }>;

    minter(overrides?: CallOverrides): Promise<[string] & { _minter: string }>;

    modifyLiability(
      _increase: PromiseOrValue<boolean>,
      _baseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    recoverDust(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    tokenBalance(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _balance: BigNumber }>;

    withdrawERC20(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  CONTROLLER(overrides?: CallOverrides): Promise<string>;

  baseLiability(overrides?: CallOverrides): Promise<BigNumber>;

  claimRewards(
    _tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimableRewards(
    _tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<IVault.RewardStructOutput[]>;

  controllerTransfer(
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositERC20(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  minter(overrides?: CallOverrides): Promise<string>;

  modifyLiability(
    _increase: PromiseOrValue<boolean>,
    _baseAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  recoverDust(
    _tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  tokenBalance(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  withdrawERC20(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    CONTROLLER(overrides?: CallOverrides): Promise<string>;

    baseLiability(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(_tokenAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    claimableRewards(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<IVault.RewardStructOutput[]>;

    controllerTransfer(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositERC20(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<string>;

    modifyLiability(
      _increase: PromiseOrValue<boolean>,
      _baseAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    recoverDust(_tokenAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    tokenBalance(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawERC20(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'ClaimedReward(address,uint256)'(_token?: null, _amount?: null): ClaimedRewardEventFilter;
    ClaimedReward(_token?: null, _amount?: null): ClaimedRewardEventFilter;

    'Deposit(address,uint256)'(_token?: null, _amount?: null): DepositEventFilter;
    Deposit(_token?: null, _amount?: null): DepositEventFilter;

    'Recover(address,uint256)'(_token?: null, _amount?: null): RecoverEventFilter;
    Recover(_token?: null, _amount?: null): RecoverEventFilter;

    'Withdraw(address,uint256)'(_token?: null, _amount?: null): WithdrawEventFilter;
    Withdraw(_token?: null, _amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    baseLiability(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimableRewards(_tokenAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    controllerTransfer(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositERC20(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    modifyLiability(
      _increase: PromiseOrValue<boolean>,
      _baseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    recoverDust(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    tokenBalance(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawERC20(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTROLLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseLiability(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimRewards(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimableRewards(_tokenAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controllerTransfer(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositERC20(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modifyLiability(
      _increase: PromiseOrValue<boolean>,
      _baseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    recoverDust(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    tokenBalance(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawERC20(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
