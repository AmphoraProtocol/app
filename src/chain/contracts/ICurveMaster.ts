/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface ICurveMasterInterface extends utils.Interface {
  functions: {
    'curves(address)': FunctionFragment;
    'forceSetCurve(address,address)': FunctionFragment;
    'getValueAt(address,int256)': FunctionFragment;
    'setCurve(address,address)': FunctionFragment;
    'setVaultController(address)': FunctionFragment;
    'vaultControllerAddress()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'curves'
      | 'forceSetCurve'
      | 'getValueAt'
      | 'setCurve'
      | 'setVaultController'
      | 'vaultControllerAddress',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'curves', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'forceSetCurve',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getValueAt',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setCurve', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setVaultController', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'vaultControllerAddress', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'curves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'forceSetCurve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getValueAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCurve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setVaultController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultControllerAddress', data: BytesLike): Result;

  events: {};
}

export interface ICurveMaster extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICurveMasterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    curves(_curveAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string] & { _curve: string }>;

    forceSetCurve(
      _tokenAddress: PromiseOrValue<string>,
      _curveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getValueAt(
      _tokenAddress: PromiseOrValue<string>,
      _xValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    setCurve(
      _tokenAddress: PromiseOrValue<string>,
      _curveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setVaultController(
      _vaultMasterAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vaultControllerAddress(overrides?: CallOverrides): Promise<[string] & { _vaultController: string }>;
  };

  curves(_curveAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  forceSetCurve(
    _tokenAddress: PromiseOrValue<string>,
    _curveAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getValueAt(
    _tokenAddress: PromiseOrValue<string>,
    _xValue: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  setCurve(
    _tokenAddress: PromiseOrValue<string>,
    _curveAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setVaultController(
    _vaultMasterAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vaultControllerAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    curves(_curveAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    forceSetCurve(
      _tokenAddress: PromiseOrValue<string>,
      _curveAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getValueAt(
      _tokenAddress: PromiseOrValue<string>,
      _xValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setCurve(
      _tokenAddress: PromiseOrValue<string>,
      _curveAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setVaultController(_vaultMasterAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    vaultControllerAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    curves(_curveAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    forceSetCurve(
      _tokenAddress: PromiseOrValue<string>,
      _curveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getValueAt(
      _tokenAddress: PromiseOrValue<string>,
      _xValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setCurve(
      _tokenAddress: PromiseOrValue<string>,
      _curveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setVaultController(
      _vaultMasterAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vaultControllerAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    curves(_curveAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceSetCurve(
      _tokenAddress: PromiseOrValue<string>,
      _curveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getValueAt(
      _tokenAddress: PromiseOrValue<string>,
      _xValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    setCurve(
      _tokenAddress: PromiseOrValue<string>,
      _curveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setVaultController(
      _vaultMasterAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vaultControllerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
