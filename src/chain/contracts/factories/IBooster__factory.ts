/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { IBooster, IBoosterInterface } from '../IBooster';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_pid',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
      {
        internalType: 'bool',
        name: '_stake',
        type: 'bool',
      },
    ],
    name: 'deposit',
    outputs: [
      {
        internalType: 'bool',
        name: '_success',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'earmarkFees',
    outputs: [
      {
        internalType: 'bool',
        name: '_claimed',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_pid',
        type: 'uint256',
      },
    ],
    name: 'earmarkRewards',
    outputs: [
      {
        internalType: 'bool',
        name: '_claimed',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '_owner',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_pid',
        type: 'uint256',
      },
    ],
    name: 'poolInfo',
    outputs: [
      {
        internalType: 'address',
        name: '_lptoken',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_token',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_gauge',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_crvRewards',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_stash',
        type: 'address',
      },
      {
        internalType: 'bool',
        name: '_shutdown',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_voteDelegate',
        type: 'address',
      },
    ],
    name: 'setVoteDelegate',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_voteId',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: '_votingAddress',
        type: 'address',
      },
      {
        internalType: 'bool',
        name: '_support',
        type: 'bool',
      },
    ],
    name: 'vote',
    outputs: [
      {
        internalType: 'bool',
        name: '_success',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: '_gauge',
        type: 'address[]',
      },
      {
        internalType: 'uint256[]',
        name: '_weight',
        type: 'uint256[]',
      },
    ],
    name: 'voteGaugeWeight',
    outputs: [
      {
        internalType: 'bool',
        name: '_success',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_pid',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'withdraw',
    outputs: [
      {
        internalType: 'bool',
        name: '_success',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

export class IBooster__factory {
  static readonly abi = _abi;
  static createInterface(): IBoosterInterface {
    return new utils.Interface(_abi) as IBoosterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IBooster {
    return new Contract(address, _abi, signerOrProvider) as IBooster;
  }
}
