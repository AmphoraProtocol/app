/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface IVaultDeployerInterface extends utils.Interface {
  functions: {
    'VAULT_CONTROLLER()': FunctionFragment;
    'deployVault(uint96,address)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'VAULT_CONTROLLER' | 'deployVault'): FunctionFragment;

  encodeFunctionData(functionFragment: 'VAULT_CONTROLLER', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deployVault',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'VAULT_CONTROLLER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployVault', data: BytesLike): Result;

  events: {};
}

export interface IVaultDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VAULT_CONTROLLER(overrides?: CallOverrides): Promise<[string] & { _vaultController: string }>;

    deployVault(
      _id: PromiseOrValue<BigNumberish>,
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  VAULT_CONTROLLER(overrides?: CallOverrides): Promise<string>;

  deployVault(
    _id: PromiseOrValue<BigNumberish>,
    _minter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    VAULT_CONTROLLER(overrides?: CallOverrides): Promise<string>;

    deployVault(
      _id: PromiseOrValue<BigNumberish>,
      _minter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    VAULT_CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    deployVault(
      _id: PromiseOrValue<BigNumberish>,
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VAULT_CONTROLLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployVault(
      _id: PromiseOrValue<BigNumberish>,
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
