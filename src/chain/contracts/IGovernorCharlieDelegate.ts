/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export type ProposalStruct = {
  id: PromiseOrValue<BigNumberish>;
  proposer: PromiseOrValue<string>;
  eta: PromiseOrValue<BigNumberish>;
  targets: PromiseOrValue<string>[];
  values: PromiseOrValue<BigNumberish>[];
  signatures: PromiseOrValue<string>[];
  calldatas: PromiseOrValue<BytesLike>[];
  startBlock: PromiseOrValue<BigNumberish>;
  endBlock: PromiseOrValue<BigNumberish>;
  forVotes: PromiseOrValue<BigNumberish>;
  againstVotes: PromiseOrValue<BigNumberish>;
  abstainVotes: PromiseOrValue<BigNumberish>;
  canceled: PromiseOrValue<boolean>;
  executed: PromiseOrValue<boolean>;
  emergency: PromiseOrValue<boolean>;
  quorumVotes: PromiseOrValue<BigNumberish>;
  delay: PromiseOrValue<BigNumberish>;
};

export type ProposalStructOutput = [
  BigNumber,
  string,
  BigNumber,
  string[],
  BigNumber[],
  string[],
  string[],
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  boolean,
  boolean,
  BigNumber,
  BigNumber,
] & {
  id: BigNumber;
  proposer: string;
  eta: BigNumber;
  targets: string[];
  values: BigNumber[];
  signatures: string[];
  calldatas: string[];
  startBlock: BigNumber;
  endBlock: BigNumber;
  forVotes: BigNumber;
  againstVotes: BigNumber;
  abstainVotes: BigNumber;
  canceled: boolean;
  executed: boolean;
  emergency: boolean;
  quorumVotes: BigNumber;
  delay: BigNumber;
};

export type ReceiptStruct = {
  hasVoted: PromiseOrValue<boolean>;
  support: PromiseOrValue<BigNumberish>;
  votes: PromiseOrValue<BigNumberish>;
};

export type ReceiptStructOutput = [boolean, number, BigNumber] & {
  hasVoted: boolean;
  support: number;
  votes: BigNumber;
};

export interface IGovernorCharlieDelegateInterface extends utils.Interface {
  functions: {
    'cancel(uint256)': FunctionFragment;
    'castVote(uint256,uint8)': FunctionFragment;
    'castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)': FunctionFragment;
    'castVoteWithReason(uint256,uint8,string)': FunctionFragment;
    'execute(uint256)': FunctionFragment;
    'executeTransaction(address,uint256,string,bytes,uint256)': FunctionFragment;
    'getActions(uint256)': FunctionFragment;
    'getProposal(uint256)': FunctionFragment;
    'getReceipt(uint256,address)': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'isWhitelisted(address)': FunctionFragment;
    'propose(address[],uint256[],string[],bytes[],string,bool)': FunctionFragment;
    'queue(uint256)': FunctionFragment;
    'setDelay(uint256)': FunctionFragment;
    'setEmergencyDelay(uint256)': FunctionFragment;
    'setEmergencyQuorumVotes(uint256)': FunctionFragment;
    'setEmergencyVotingPeriod(uint256)': FunctionFragment;
    'setOptimisticDelay(uint256)': FunctionFragment;
    'setOptimisticQuorumVotes(uint256)': FunctionFragment;
    'setProposalThreshold(uint256)': FunctionFragment;
    'setQuorumVotes(uint256)': FunctionFragment;
    'setVotingDelay(uint256)': FunctionFragment;
    'setVotingPeriod(uint256)': FunctionFragment;
    'setWhitelistAccountExpiration(address,uint256)': FunctionFragment;
    'setWhitelistGuardian(address)': FunctionFragment;
    'state(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'cancel'
      | 'castVote'
      | 'castVoteBySig'
      | 'castVoteWithReason'
      | 'execute'
      | 'executeTransaction'
      | 'getActions'
      | 'getProposal'
      | 'getReceipt'
      | 'initialize'
      | 'isWhitelisted'
      | 'propose'
      | 'queue'
      | 'setDelay'
      | 'setEmergencyDelay'
      | 'setEmergencyQuorumVotes'
      | 'setEmergencyVotingPeriod'
      | 'setOptimisticDelay'
      | 'setOptimisticQuorumVotes'
      | 'setProposalThreshold'
      | 'setQuorumVotes'
      | 'setVotingDelay'
      | 'setVotingPeriod'
      | 'setWhitelistAccountExpiration'
      | 'setWhitelistGuardian'
      | 'state',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'cancel', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'castVote',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'castVoteBySig',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'castVoteWithReason',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'execute', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'executeTransaction',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getActions', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getProposal', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getReceipt',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isWhitelisted', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'propose',
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'queue', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setDelay', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setEmergencyDelay', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setEmergencyQuorumVotes', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setEmergencyVotingPeriod', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setOptimisticDelay', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setOptimisticQuorumVotes', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setProposalThreshold', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setQuorumVotes', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setVotingDelay', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setVotingPeriod', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setWhitelistAccountExpiration',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setWhitelistGuardian', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'state', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'cancel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'castVote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'castVoteBySig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'castVoteWithReason', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'execute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executeTransaction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getActions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProposal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReceipt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isWhitelisted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'propose', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDelay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEmergencyDelay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEmergencyQuorumVotes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEmergencyVotingPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOptimisticDelay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOptimisticQuorumVotes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setProposalThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setQuorumVotes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setVotingDelay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setVotingPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWhitelistAccountExpiration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWhitelistGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'state', data: BytesLike): Result;

  events: {
    'CancelTransaction(bytes32,address,uint256,string,bytes,uint256)': EventFragment;
    'EmergencyVotingPeriodSet(uint256,uint256)': EventFragment;
    'ExecuteTransaction(bytes32,address,uint256,string,bytes,uint256)': EventFragment;
    'NewAdmin(address,address)': EventFragment;
    'NewDelay(uint256,uint256)': EventFragment;
    'NewEmergencyDelay(uint256,uint256)': EventFragment;
    'NewEmergencyQuorum(uint256,uint256)': EventFragment;
    'NewImplementation(address,address)': EventFragment;
    'NewPendingAdmin(address,address)': EventFragment;
    'NewQuorum(uint256,uint256)': EventFragment;
    'OptimisticQuorumVotesSet(uint256,uint256)': EventFragment;
    'OptimisticVotingDelaySet(uint256,uint256)': EventFragment;
    'ProposalCanceled(uint256)': EventFragment;
    'ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)': EventFragment;
    'ProposalExecuted(uint256)': EventFragment;
    'ProposalQueued(uint256,uint256)': EventFragment;
    'ProposalThresholdSet(uint256,uint256)': EventFragment;
    'QueueTransaction(bytes32,address,uint256,string,bytes,uint256)': EventFragment;
    'VoteCast(address,uint256,uint8,uint256,string)': EventFragment;
    'VotingDelaySet(uint256,uint256)': EventFragment;
    'VotingPeriodSet(uint256,uint256)': EventFragment;
    'WhitelistAccountExpirationSet(address,uint256)': EventFragment;
    'WhitelistGuardianSet(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CancelTransaction'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyVotingPeriodSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExecuteTransaction'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewAdmin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewDelay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewEmergencyDelay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewEmergencyQuorum'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewImplementation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPendingAdmin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewQuorum'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OptimisticQuorumVotesSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OptimisticVotingDelaySet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProposalCanceled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProposalCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProposalExecuted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProposalQueued'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProposalThresholdSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QueueTransaction'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VoteCast'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VotingDelaySet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VotingPeriodSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WhitelistAccountExpirationSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WhitelistGuardianSet'): EventFragment;
}

export interface CancelTransactionEventObject {
  _txHash: string;
  _target: string;
  _value: BigNumber;
  _signature: string;
  _data: string;
  _eta: BigNumber;
}
export type CancelTransactionEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber],
  CancelTransactionEventObject
>;

export type CancelTransactionEventFilter = TypedEventFilter<CancelTransactionEvent>;

export interface EmergencyVotingPeriodSetEventObject {
  _oldEmergencyVotingPeriod: BigNumber;
  _emergencyVotingPeriod: BigNumber;
}
export type EmergencyVotingPeriodSetEvent = TypedEvent<[BigNumber, BigNumber], EmergencyVotingPeriodSetEventObject>;

export type EmergencyVotingPeriodSetEventFilter = TypedEventFilter<EmergencyVotingPeriodSetEvent>;

export interface ExecuteTransactionEventObject {
  _txHash: string;
  _target: string;
  _value: BigNumber;
  _signature: string;
  _data: string;
  _eta: BigNumber;
}
export type ExecuteTransactionEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber],
  ExecuteTransactionEventObject
>;

export type ExecuteTransactionEventFilter = TypedEventFilter<ExecuteTransactionEvent>;

export interface NewAdminEventObject {
  _oldAdmin: string;
  _newAdmin: string;
}
export type NewAdminEvent = TypedEvent<[string, string], NewAdminEventObject>;

export type NewAdminEventFilter = TypedEventFilter<NewAdminEvent>;

export interface NewDelayEventObject {
  _oldTimelockDelay: BigNumber;
  _proposalTimelockDelay: BigNumber;
}
export type NewDelayEvent = TypedEvent<[BigNumber, BigNumber], NewDelayEventObject>;

export type NewDelayEventFilter = TypedEventFilter<NewDelayEvent>;

export interface NewEmergencyDelayEventObject {
  _oldEmergencyTimelockDelay: BigNumber;
  _emergencyTimelockDelay: BigNumber;
}
export type NewEmergencyDelayEvent = TypedEvent<[BigNumber, BigNumber], NewEmergencyDelayEventObject>;

export type NewEmergencyDelayEventFilter = TypedEventFilter<NewEmergencyDelayEvent>;

export interface NewEmergencyQuorumEventObject {
  _oldEmergencyQuorumVotes: BigNumber;
  _emergencyQuorumVotes: BigNumber;
}
export type NewEmergencyQuorumEvent = TypedEvent<[BigNumber, BigNumber], NewEmergencyQuorumEventObject>;

export type NewEmergencyQuorumEventFilter = TypedEventFilter<NewEmergencyQuorumEvent>;

export interface NewImplementationEventObject {
  _oldImplementation: string;
  _newImplementation: string;
}
export type NewImplementationEvent = TypedEvent<[string, string], NewImplementationEventObject>;

export type NewImplementationEventFilter = TypedEventFilter<NewImplementationEvent>;

export interface NewPendingAdminEventObject {
  _oldPendingAdmin: string;
  _newPendingAdmin: string;
}
export type NewPendingAdminEvent = TypedEvent<[string, string], NewPendingAdminEventObject>;

export type NewPendingAdminEventFilter = TypedEventFilter<NewPendingAdminEvent>;

export interface NewQuorumEventObject {
  _oldQuorumVotes: BigNumber;
  _quorumVotes: BigNumber;
}
export type NewQuorumEvent = TypedEvent<[BigNumber, BigNumber], NewQuorumEventObject>;

export type NewQuorumEventFilter = TypedEventFilter<NewQuorumEvent>;

export interface OptimisticQuorumVotesSetEventObject {
  _oldOptimisticQuorumVotes: BigNumber;
  _optimisticQuorumVotes: BigNumber;
}
export type OptimisticQuorumVotesSetEvent = TypedEvent<[BigNumber, BigNumber], OptimisticQuorumVotesSetEventObject>;

export type OptimisticQuorumVotesSetEventFilter = TypedEventFilter<OptimisticQuorumVotesSetEvent>;

export interface OptimisticVotingDelaySetEventObject {
  _oldOptimisticVotingDelay: BigNumber;
  _optimisticVotingDelay: BigNumber;
}
export type OptimisticVotingDelaySetEvent = TypedEvent<[BigNumber, BigNumber], OptimisticVotingDelaySetEventObject>;

export type OptimisticVotingDelaySetEventFilter = TypedEventFilter<OptimisticVotingDelaySetEvent>;

export interface ProposalCanceledEventObject {
  _id: BigNumber;
}
export type ProposalCanceledEvent = TypedEvent<[BigNumber], ProposalCanceledEventObject>;

export type ProposalCanceledEventFilter = TypedEventFilter<ProposalCanceledEvent>;

export interface ProposalCreatedEventObject {
  _id: BigNumber;
  _proposer: string;
  _targets: string[];
  _values: BigNumber[];
  _signatures: string[];
  _calldatas: string[];
  _startBlock: BigNumber;
  _endBlock: BigNumber;
  _description: string;
}
export type ProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string[], BigNumber[], string[], string[], BigNumber, BigNumber, string],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalExecutedEventObject {
  _id: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<[BigNumber], ProposalExecutedEventObject>;

export type ProposalExecutedEventFilter = TypedEventFilter<ProposalExecutedEvent>;

export interface ProposalQueuedEventObject {
  _id: BigNumber;
  _eta: BigNumber;
}
export type ProposalQueuedEvent = TypedEvent<[BigNumber, BigNumber], ProposalQueuedEventObject>;

export type ProposalQueuedEventFilter = TypedEventFilter<ProposalQueuedEvent>;

export interface ProposalThresholdSetEventObject {
  _oldProposalThreshold: BigNumber;
  _newProposalThreshold: BigNumber;
}
export type ProposalThresholdSetEvent = TypedEvent<[BigNumber, BigNumber], ProposalThresholdSetEventObject>;

export type ProposalThresholdSetEventFilter = TypedEventFilter<ProposalThresholdSetEvent>;

export interface QueueTransactionEventObject {
  _txHash: string;
  _target: string;
  _value: BigNumber;
  _signature: string;
  _data: string;
  _eta: BigNumber;
}
export type QueueTransactionEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber],
  QueueTransactionEventObject
>;

export type QueueTransactionEventFilter = TypedEventFilter<QueueTransactionEvent>;

export interface VoteCastEventObject {
  _voter: string;
  _proposalId: BigNumber;
  _support: number;
  _votes: BigNumber;
  _reason: string;
}
export type VoteCastEvent = TypedEvent<[string, BigNumber, number, BigNumber, string], VoteCastEventObject>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface VotingDelaySetEventObject {
  _oldVotingDelay: BigNumber;
  _newVotingDelay: BigNumber;
}
export type VotingDelaySetEvent = TypedEvent<[BigNumber, BigNumber], VotingDelaySetEventObject>;

export type VotingDelaySetEventFilter = TypedEventFilter<VotingDelaySetEvent>;

export interface VotingPeriodSetEventObject {
  _oldVotingPeriod: BigNumber;
  _newVotingPeriod: BigNumber;
}
export type VotingPeriodSetEvent = TypedEvent<[BigNumber, BigNumber], VotingPeriodSetEventObject>;

export type VotingPeriodSetEventFilter = TypedEventFilter<VotingPeriodSetEvent>;

export interface WhitelistAccountExpirationSetEventObject {
  _account: string;
  _expiration: BigNumber;
}
export type WhitelistAccountExpirationSetEvent = TypedEvent<
  [string, BigNumber],
  WhitelistAccountExpirationSetEventObject
>;

export type WhitelistAccountExpirationSetEventFilter = TypedEventFilter<WhitelistAccountExpirationSetEvent>;

export interface WhitelistGuardianSetEventObject {
  _oldGuardian: string;
  _newGuardian: string;
}
export type WhitelistGuardianSetEvent = TypedEvent<[string, string], WhitelistGuardianSetEventObject>;

export type WhitelistGuardianSetEventFilter = TypedEventFilter<WhitelistGuardianSetEvent>;

export interface IGovernorCharlieDelegate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGovernorCharlieDelegateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancel(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    castVote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    castVoteBySig(
      _proposalId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    castVoteWithReason(
      _proposalId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    execute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    executeTransaction(
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _eta: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getActions(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[], string[], string[]] & {
        _targets: string[];
        _values: BigNumber[];
        _signatures: string[];
        _calldatas: string[];
      }
    >;

    getProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[ProposalStructOutput] & { _proposal: ProposalStructOutput }>;

    getReceipt(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[ReceiptStructOutput] & { _receipt: ReceiptStructOutput }>;

    initialize(
      _amph: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isWhitelisted(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { _isWhitelisted: boolean }>;

    propose(
      _targets: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      _signatures: PromiseOrValue<string>[],
      _calldatas: PromiseOrValue<BytesLike>[],
      _description: PromiseOrValue<string>,
      _emergency: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    queue(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDelay(
      _proposalTimelockDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setEmergencyDelay(
      _emergencyTimelockDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setEmergencyQuorumVotes(
      _newEmergencyQuorumVotes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setEmergencyVotingPeriod(
      _newEmergencyVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOptimisticDelay(
      _newOptimisticVotingDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOptimisticQuorumVotes(
      _newOptimisticQuorumVotes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setProposalThreshold(
      _newProposalThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setQuorumVotes(
      _newQuorumVotes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setVotingDelay(
      _newVotingDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setVotingPeriod(
      _newVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setWhitelistAccountExpiration(
      _account: PromiseOrValue<string>,
      _expiration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setWhitelistGuardian(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    state(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[number] & { _proposalState: number }>;
  };

  cancel(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  castVote(
    _proposalId: PromiseOrValue<BigNumberish>,
    _support: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  castVoteBySig(
    _proposalId: PromiseOrValue<BigNumberish>,
    _support: PromiseOrValue<BigNumberish>,
    _v: PromiseOrValue<BigNumberish>,
    _r: PromiseOrValue<BytesLike>,
    _s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  castVoteWithReason(
    _proposalId: PromiseOrValue<BigNumberish>,
    _support: PromiseOrValue<BigNumberish>,
    _reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  execute(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  executeTransaction(
    _target: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    _eta: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getActions(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string[], BigNumber[], string[], string[]] & {
      _targets: string[];
      _values: BigNumber[];
      _signatures: string[];
      _calldatas: string[];
    }
  >;

  getProposal(_proposalId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ProposalStructOutput>;

  getReceipt(
    _proposalId: PromiseOrValue<BigNumberish>,
    _voter: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<ReceiptStructOutput>;

  initialize(
    _amph: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isWhitelisted(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  propose(
    _targets: PromiseOrValue<string>[],
    _values: PromiseOrValue<BigNumberish>[],
    _signatures: PromiseOrValue<string>[],
    _calldatas: PromiseOrValue<BytesLike>[],
    _description: PromiseOrValue<string>,
    _emergency: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  queue(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDelay(
    _proposalTimelockDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setEmergencyDelay(
    _emergencyTimelockDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setEmergencyQuorumVotes(
    _newEmergencyQuorumVotes: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setEmergencyVotingPeriod(
    _newEmergencyVotingPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOptimisticDelay(
    _newOptimisticVotingDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOptimisticQuorumVotes(
    _newOptimisticQuorumVotes: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setProposalThreshold(
    _newProposalThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setQuorumVotes(
    _newQuorumVotes: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setVotingDelay(
    _newVotingDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setVotingPeriod(
    _newVotingPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setWhitelistAccountExpiration(
    _account: PromiseOrValue<string>,
    _expiration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setWhitelistGuardian(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  state(_proposalId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;

  callStatic: {
    cancel(_proposalId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    castVote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    castVoteBySig(
      _proposalId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    castVoteWithReason(
      _proposalId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    execute(_proposalId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    executeTransaction(
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _eta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getActions(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[], string[], string[]] & {
        _targets: string[];
        _values: BigNumber[];
        _signatures: string[];
        _calldatas: string[];
      }
    >;

    getProposal(_proposalId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ProposalStructOutput>;

    getReceipt(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<ReceiptStructOutput>;

    initialize(_amph: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    isWhitelisted(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    propose(
      _targets: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      _signatures: PromiseOrValue<string>[],
      _calldatas: PromiseOrValue<BytesLike>[],
      _description: PromiseOrValue<string>,
      _emergency: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    queue(_proposalId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setDelay(_proposalTimelockDelay: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setEmergencyDelay(_emergencyTimelockDelay: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setEmergencyQuorumVotes(
      _newEmergencyQuorumVotes: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setEmergencyVotingPeriod(
      _newEmergencyVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setOptimisticDelay(
      _newOptimisticVotingDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setOptimisticQuorumVotes(
      _newOptimisticQuorumVotes: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setProposalThreshold(_newProposalThreshold: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setQuorumVotes(_newQuorumVotes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setVotingDelay(_newVotingDelay: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setVotingPeriod(_newVotingPeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setWhitelistAccountExpiration(
      _account: PromiseOrValue<string>,
      _expiration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setWhitelistGuardian(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    state(_proposalId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    'CancelTransaction(bytes32,address,uint256,string,bytes,uint256)'(
      _txHash?: PromiseOrValue<BytesLike> | null,
      _target?: PromiseOrValue<string> | null,
      _value?: null,
      _signature?: null,
      _data?: null,
      _eta?: null,
    ): CancelTransactionEventFilter;
    CancelTransaction(
      _txHash?: PromiseOrValue<BytesLike> | null,
      _target?: PromiseOrValue<string> | null,
      _value?: null,
      _signature?: null,
      _data?: null,
      _eta?: null,
    ): CancelTransactionEventFilter;

    'EmergencyVotingPeriodSet(uint256,uint256)'(
      _oldEmergencyVotingPeriod?: null,
      _emergencyVotingPeriod?: null,
    ): EmergencyVotingPeriodSetEventFilter;
    EmergencyVotingPeriodSet(
      _oldEmergencyVotingPeriod?: null,
      _emergencyVotingPeriod?: null,
    ): EmergencyVotingPeriodSetEventFilter;

    'ExecuteTransaction(bytes32,address,uint256,string,bytes,uint256)'(
      _txHash?: PromiseOrValue<BytesLike> | null,
      _target?: PromiseOrValue<string> | null,
      _value?: null,
      _signature?: null,
      _data?: null,
      _eta?: null,
    ): ExecuteTransactionEventFilter;
    ExecuteTransaction(
      _txHash?: PromiseOrValue<BytesLike> | null,
      _target?: PromiseOrValue<string> | null,
      _value?: null,
      _signature?: null,
      _data?: null,
      _eta?: null,
    ): ExecuteTransactionEventFilter;

    'NewAdmin(address,address)'(_oldAdmin?: null, _newAdmin?: null): NewAdminEventFilter;
    NewAdmin(_oldAdmin?: null, _newAdmin?: null): NewAdminEventFilter;

    'NewDelay(uint256,uint256)'(_oldTimelockDelay?: null, _proposalTimelockDelay?: null): NewDelayEventFilter;
    NewDelay(_oldTimelockDelay?: null, _proposalTimelockDelay?: null): NewDelayEventFilter;

    'NewEmergencyDelay(uint256,uint256)'(
      _oldEmergencyTimelockDelay?: null,
      _emergencyTimelockDelay?: null,
    ): NewEmergencyDelayEventFilter;
    NewEmergencyDelay(_oldEmergencyTimelockDelay?: null, _emergencyTimelockDelay?: null): NewEmergencyDelayEventFilter;

    'NewEmergencyQuorum(uint256,uint256)'(
      _oldEmergencyQuorumVotes?: null,
      _emergencyQuorumVotes?: null,
    ): NewEmergencyQuorumEventFilter;
    NewEmergencyQuorum(_oldEmergencyQuorumVotes?: null, _emergencyQuorumVotes?: null): NewEmergencyQuorumEventFilter;

    'NewImplementation(address,address)'(
      _oldImplementation?: null,
      _newImplementation?: null,
    ): NewImplementationEventFilter;
    NewImplementation(_oldImplementation?: null, _newImplementation?: null): NewImplementationEventFilter;

    'NewPendingAdmin(address,address)'(_oldPendingAdmin?: null, _newPendingAdmin?: null): NewPendingAdminEventFilter;
    NewPendingAdmin(_oldPendingAdmin?: null, _newPendingAdmin?: null): NewPendingAdminEventFilter;

    'NewQuorum(uint256,uint256)'(_oldQuorumVotes?: null, _quorumVotes?: null): NewQuorumEventFilter;
    NewQuorum(_oldQuorumVotes?: null, _quorumVotes?: null): NewQuorumEventFilter;

    'OptimisticQuorumVotesSet(uint256,uint256)'(
      _oldOptimisticQuorumVotes?: null,
      _optimisticQuorumVotes?: null,
    ): OptimisticQuorumVotesSetEventFilter;
    OptimisticQuorumVotesSet(
      _oldOptimisticQuorumVotes?: null,
      _optimisticQuorumVotes?: null,
    ): OptimisticQuorumVotesSetEventFilter;

    'OptimisticVotingDelaySet(uint256,uint256)'(
      _oldOptimisticVotingDelay?: null,
      _optimisticVotingDelay?: null,
    ): OptimisticVotingDelaySetEventFilter;
    OptimisticVotingDelaySet(
      _oldOptimisticVotingDelay?: null,
      _optimisticVotingDelay?: null,
    ): OptimisticVotingDelaySetEventFilter;

    'ProposalCanceled(uint256)'(_id?: PromiseOrValue<BigNumberish> | null): ProposalCanceledEventFilter;
    ProposalCanceled(_id?: PromiseOrValue<BigNumberish> | null): ProposalCanceledEventFilter;

    'ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)'(
      _id?: PromiseOrValue<BigNumberish> | null,
      _proposer?: PromiseOrValue<string> | null,
      _targets?: null,
      _values?: null,
      _signatures?: null,
      _calldatas?: null,
      _startBlock?: PromiseOrValue<BigNumberish> | null,
      _endBlock?: null,
      _description?: null,
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      _id?: PromiseOrValue<BigNumberish> | null,
      _proposer?: PromiseOrValue<string> | null,
      _targets?: null,
      _values?: null,
      _signatures?: null,
      _calldatas?: null,
      _startBlock?: PromiseOrValue<BigNumberish> | null,
      _endBlock?: null,
      _description?: null,
    ): ProposalCreatedEventFilter;

    'ProposalExecuted(uint256)'(_id?: PromiseOrValue<BigNumberish> | null): ProposalExecutedEventFilter;
    ProposalExecuted(_id?: PromiseOrValue<BigNumberish> | null): ProposalExecutedEventFilter;

    'ProposalQueued(uint256,uint256)'(
      _id?: PromiseOrValue<BigNumberish> | null,
      _eta?: null,
    ): ProposalQueuedEventFilter;
    ProposalQueued(_id?: PromiseOrValue<BigNumberish> | null, _eta?: null): ProposalQueuedEventFilter;

    'ProposalThresholdSet(uint256,uint256)'(
      _oldProposalThreshold?: null,
      _newProposalThreshold?: null,
    ): ProposalThresholdSetEventFilter;
    ProposalThresholdSet(_oldProposalThreshold?: null, _newProposalThreshold?: null): ProposalThresholdSetEventFilter;

    'QueueTransaction(bytes32,address,uint256,string,bytes,uint256)'(
      _txHash?: PromiseOrValue<BytesLike> | null,
      _target?: PromiseOrValue<string> | null,
      _value?: null,
      _signature?: null,
      _data?: null,
      _eta?: null,
    ): QueueTransactionEventFilter;
    QueueTransaction(
      _txHash?: PromiseOrValue<BytesLike> | null,
      _target?: PromiseOrValue<string> | null,
      _value?: null,
      _signature?: null,
      _data?: null,
      _eta?: null,
    ): QueueTransactionEventFilter;

    'VoteCast(address,uint256,uint8,uint256,string)'(
      _voter?: PromiseOrValue<string> | null,
      _proposalId?: PromiseOrValue<BigNumberish> | null,
      _support?: null,
      _votes?: null,
      _reason?: null,
    ): VoteCastEventFilter;
    VoteCast(
      _voter?: PromiseOrValue<string> | null,
      _proposalId?: PromiseOrValue<BigNumberish> | null,
      _support?: null,
      _votes?: null,
      _reason?: null,
    ): VoteCastEventFilter;

    'VotingDelaySet(uint256,uint256)'(_oldVotingDelay?: null, _newVotingDelay?: null): VotingDelaySetEventFilter;
    VotingDelaySet(_oldVotingDelay?: null, _newVotingDelay?: null): VotingDelaySetEventFilter;

    'VotingPeriodSet(uint256,uint256)'(_oldVotingPeriod?: null, _newVotingPeriod?: null): VotingPeriodSetEventFilter;
    VotingPeriodSet(_oldVotingPeriod?: null, _newVotingPeriod?: null): VotingPeriodSetEventFilter;

    'WhitelistAccountExpirationSet(address,uint256)'(
      _account?: null,
      _expiration?: null,
    ): WhitelistAccountExpirationSetEventFilter;
    WhitelistAccountExpirationSet(_account?: null, _expiration?: null): WhitelistAccountExpirationSetEventFilter;

    'WhitelistGuardianSet(address,address)'(_oldGuardian?: null, _newGuardian?: null): WhitelistGuardianSetEventFilter;
    WhitelistGuardianSet(_oldGuardian?: null, _newGuardian?: null): WhitelistGuardianSetEventFilter;
  };

  estimateGas: {
    cancel(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    castVote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    castVoteBySig(
      _proposalId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    castVoteWithReason(
      _proposalId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    execute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    executeTransaction(
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _eta: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getActions(_proposalId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getProposal(_proposalId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getReceipt(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      _amph: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isWhitelisted(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    propose(
      _targets: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      _signatures: PromiseOrValue<string>[],
      _calldatas: PromiseOrValue<BytesLike>[],
      _description: PromiseOrValue<string>,
      _emergency: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    queue(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDelay(
      _proposalTimelockDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setEmergencyDelay(
      _emergencyTimelockDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setEmergencyQuorumVotes(
      _newEmergencyQuorumVotes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setEmergencyVotingPeriod(
      _newEmergencyVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOptimisticDelay(
      _newOptimisticVotingDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOptimisticQuorumVotes(
      _newOptimisticQuorumVotes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setProposalThreshold(
      _newProposalThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setQuorumVotes(
      _newQuorumVotes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setVotingDelay(
      _newVotingDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setVotingPeriod(
      _newVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setWhitelistAccountExpiration(
      _account: PromiseOrValue<string>,
      _expiration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setWhitelistGuardian(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    state(_proposalId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cancel(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    castVote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    castVoteBySig(
      _proposalId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    castVoteWithReason(
      _proposalId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    execute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _eta: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getActions(_proposalId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProposal(_proposalId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReceipt(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      _amph: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isWhitelisted(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    propose(
      _targets: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      _signatures: PromiseOrValue<string>[],
      _calldatas: PromiseOrValue<BytesLike>[],
      _description: PromiseOrValue<string>,
      _emergency: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    queue(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDelay(
      _proposalTimelockDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setEmergencyDelay(
      _emergencyTimelockDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setEmergencyQuorumVotes(
      _newEmergencyQuorumVotes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setEmergencyVotingPeriod(
      _newEmergencyVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOptimisticDelay(
      _newOptimisticVotingDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOptimisticQuorumVotes(
      _newOptimisticQuorumVotes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setProposalThreshold(
      _newProposalThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setQuorumVotes(
      _newQuorumVotes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setVotingDelay(
      _newVotingDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setVotingPeriod(
      _newVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setWhitelistAccountExpiration(
      _account: PromiseOrValue<string>,
      _expiration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setWhitelistGuardian(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    state(_proposalId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
